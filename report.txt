import React, { useMemo } from 'react';
import { Box, TableCell, TableRow } from '@mui/material';
import MaterialReactTable from 'material-react-table';
import { format, eachDayOfInterval } from 'date-fns';
import { enGB } from 'date-fns/locale';

function DynamicTable({ startDate, endDate }) {
  const data = [
    { date: '01/01/2023', name: 'Test', vacation: '1', status: 'error' },
    { date: '02/01/2023', name: 'Test2', vacation: '4', status: 'ignored' },
    // Add more data entries as needed
  ];

  const columns = useMemo(() => {
    if (!startDate || !endDate) return [];

    const dates = eachDayOfInterval({ start: startDate, end: endDate });
    return [
      { accessorKey: 'name', header: 'Name' },
      ...dates.map(date => ({
        accessorKey: format(date, 'dd/MM/yyyy'),
        header: format(date, 'dd/MM/yyyy'),
        cell: ({ row, column }) => {
          const dateStr = format(date, 'dd/MM/yyyy');
          const rowData = data.find(item => item.date === dateStr);
          const cellValue = rowData ? rowData.vacation : '-';
          const cellStatus = rowData ? rowData.status : '';

          const handleClick = () => {
            // Handle cell click event
            alert(`Clicked on ${dateStr}: ${cellValue}`);
          };

          // Determine background color based on status
          const cellBackgroundColor = cellStatus === 'error' ? 'red' : cellStatus === 'ignored' ? 'yellow' : 'transparent';

          return (
            <TableCell
              onClick={handleClick}
              sx={{ backgroundColor: cellBackgroundColor, color: 'black', cursor: 'pointer' }}
            >
              {cellValue}
            </TableCell>
          );
        }
      }))
    ];
  }, [startDate, endDate, data]);

  const tableData = useMemo(() => {
    if (!startDate || !endDate) return [];

    const dates = eachDayOfInterval({ start: startDate, end: endDate });
    return data.map(item => ({
      name: item.name,
      ...dates.reduce((acc, date) => {
        const formattedDate = format(date, 'dd/MM/yyyy');
        acc[formattedDate] = item.date === formattedDate ? item.vacation : '-';
        return acc;
      }, {}),
    }));
  }, [startDate, endDate, data]);

  return (
    <Box sx={{ padding: 2 }}>
      <MaterialReactTable
        columns={columns}
        data={tableData}
      />
    </Box>
  );
}

export default DynamicTable;
