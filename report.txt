import React, { useState } from 'react';
import { Box, Grid, Typography, Paper, TextField, Button, FormControl, InputLabel, Select, MenuItem } from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { useNavigate } from 'react-router-dom';

const Dashboard = () => {
  const navigate = useNavigate();
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedSeverity, setSelectedSeverity] = useState('');

  const handleNavigation = (path) => {
    navigate(path);
  };

  // Mock data for statistics
  const statistics = {
    dataCheck: [
      { total: 150, errors: 5, warnings: 10, severity: 'high' },
      { total: 120, errors: 10, warnings: 15, severity: 'medium' }
    ],
    metadataCheck: [
      { total: 100, errors: 3, warnings: 7, severity: 'low' },
      { total: 80, errors: 2, warnings: 5, severity: 'medium' }
    ],
    parameterCheck: [
      { total: 90, errors: 1, warnings: 3, severity: 'low' }
    ],
    monitoringCheck: [
      { total: 200, errors: 0, warnings: 8, severity: 'critical' }
    ]
  };

  // Function to determine the color based on severity
  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical':
        return 'red';
      case 'high':
        return 'orange';
      case 'medium':
        return 'yellow';
      case 'low':
        return 'green';
      default:
        return 'grey';
    }
  };

  // Function to render cards for a specific check type
  const renderCards = (checkType, statsArray) => (
    statsArray.map((stats, index) => (
      <Grid item xs={12} sm={6} md={3} key={`${checkType}-${index}`}>
        <Paper
          onClick={() => handleNavigation(`/${checkType}-check`)}
          sx={{
            padding: 2,
            cursor: 'pointer',
            textAlign: 'center',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            backgroundColor: getSeverityColor(stats.severity),
            color: 'white',
            borderRadius: '8px',
            boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
          }}
        >
          <Typography variant="h6">
            {`${checkType.replace(/([A-Z])/g, ' $1').toUpperCase()} ${index + 1}`}
          </Typography>
          <Typography variant="h5">
            Total: {stats.total}
          </Typography>
          <Typography variant="body1">
            Errors: {stats.errors}
          </Typography>
          <Typography variant="body1">
            Warnings: {stats.warnings}
          </Typography>
        </Paper>
      </Grid>
    ))
  );

  return (
    <Box p={3}>
      <Typography variant="h4" align="center" gutterBottom>
        Data Quality Dashboard
      </Typography>

      {/* Filter Section */}
      <Box mb={3} textAlign="center">
        <FormControl fullWidth>
          <DatePicker
            label="Filter by Date"
            value={selectedDate}
            onChange={(newValue) => setSelectedDate(newValue)}
            renderInput={(params) => <TextField {...params} fullWidth />}
            sx={{ marginBottom: 2 }}
          />
          <FormControl fullWidth>
            <InputLabel id="severity-label">Select Severity</InputLabel>
            <Select
              labelId="severity-label"
              value={selectedSeverity}
              onChange={(event) => setSelectedSeverity(event.target.value)}
              label="Select Severity"
            >
              <MenuItem value="">All</MenuItem>
              <MenuItem value="low">Low</MenuItem>
              <MenuItem value="medium">Medium</MenuItem>
              <MenuItem value="high">High</MenuItem>
              <MenuItem value="critical">Critical</MenuItem>
            </Select>
          </FormControl>
          <Button
            variant="contained"
            color="primary"
            fullWidth
            sx={{ marginTop: 2 }}
            onClick={() => console.log('Filters applied', { selectedDate, selectedSeverity })}
          >
            Apply Filters
          </Button>
        </FormControl>
      </Box>

      {/* Statistics Cards */}
      <Grid container spacing={3}>
        {Object.entries(statistics).map(([checkType, statsArray]) => renderCards(checkType, statsArray))}
      </Grid>
    </Box>
  );
};

export default Dashboard;
