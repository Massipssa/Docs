import React, { useEffect, useState } from 'react';
import { Box, Typography } from '@mui/material';
import {
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer
} from 'recharts';

// Example raw data (replace this with your actual data from the image)
const rawData = [
  { fileType: 'CRE', opcDate: '20240913', objectName: '7IVLT', vacation: '5', status: 'ingested' },
  { fileType: 'CRE', opcDate: '20240913', objectName: 'MC041', vacation: '5', status: 'error' },
  { fileType: 'CRE', opcDate: '20240914', objectName: '7X002', vacation: '6', status: 'ignored' },
  { fileType: 'CRE', opcDate: '20240914', objectName: '7X003', vacation: '5', status: 'ingested' },
  // Add more entries similar to the format in the image
];

// Function to convert opcDate from YYYYMMDD to MM/DD/YYYY
const formatOpcDate = (opcDate) => {
  const year = opcDate.substring(0, 4);
  const month = opcDate.substring(4, 6);
  const day = opcDate.substring(6, 8);
  return `${month}/${day}/${year}`;
};

// Function to process the raw data
const processData = (data) => {
  const dateMap = {};

  data.forEach((entry) => {
    const { opcDate, status } = entry;

    if (!dateMap[opcDate]) {
      dateMap[opcDate] = { opcDate, ingested: 0, error: 0, ignored: 0 };
    }

    // Increment the count based on status
    if (status === 'ingested') dateMap[opcDate].ingested += 1;
    if (status === 'error') dateMap[opcDate].error += 1;
    if (status === 'ignored') dateMap[opcDate].ignored += 1;
  });

  // Convert the map into an array
  return Object.values(dateMap);
};

const StatusLineChart = () => {
  const [chartData, setChartData] = useState([]);

  useEffect(() => {
    // Process the raw data and set it to chart data
    const processedData = processData(rawData);
    setChartData(processedData);
  }, []);

  return (
    <Box sx={{ padding: 3 }}>
      <Typography variant="h6" gutterBottom>
        Object Count by OPC Date (Ingested, Error, Ignored)
      </Typography>

      <ResponsiveContainer width="100%" height={400}>
        <LineChart
          data={chartData}
          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          
          {/* Format opcDate in MM/DD/YYYY */}
          <XAxis
            dataKey="opcDate"
            tickFormatter={formatOpcDate}  // Use custom formatter here
          />
          
          <YAxis />
          <Tooltip />
          <Legend />
          <Line type="monotone" dataKey="ingested" stroke="#82ca9d" />
          <Line type="monotone" dataKey="error" stroke="#ff7300" />
          <Line type="monotone" dataKey="ignored" stroke="#8884d8" />
        </LineChart>
      </ResponsiveContainer>
    </Box>
  );
};

export default StatusLineChart;
