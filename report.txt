const DynamicTable = ({ values }) => {
  const { activityStartDate, activityEndDate } = values || {};

  // Ensure formattedStart and formattedEnd are defined regardless of condition
  const formattedStart = activityStartDate
    ? format(activityStartDate, 'yyyyMMdd').toString()
    : '';
  const formattedEnd = activityEndDate
    ? format(activityEndDate, 'yyyyMMdd').toString()
    : '';

  // Fetch data using useQuery
  const { data, error, isLoading } = useQuery({
    queryKey: ['creData', { formattedStart, formattedEnd }],
    queryFn: fetchCreData,
    enabled: !!formattedStart && !!formattedEnd, // Only fetch when both dates are available
  });

  if (isLoading) {
    return (
      <Paper>
        <CircularProgress />
      </Paper>
    );
  }

  if (error) {
    return (
      <Paper>
        <Typography>Error Fetching Data: {error.message}</Typography>
      </Paper>
    );
  }

  // Define columns and data mapping
  const columns = useMemo(() => {
    if (!activityStartDate || !activityEndDate) return [];

    const dates = eachDayOfInterval({
      start: activityStartDate,
      end: activityEndDate,
    });

    return [
      {
        accessorKey: 'objectName',
        header: 'CRE',
      },
      ...dates.map((date) => ({
        accessorKey: format(date, 'dd/MM/yyyy'),
        header: format(date, 'dd/MM/yyyy'),
        Cell: ({ row }) => {
          const dateStr = format(date, 'yyyyMMdd');
          const rowData = row.original;
          const opcDate = rowData ? rowData.opcDate : '';
          const vacation = rowData ? rowData.vacation : '';
          const cellValue = `${vacation}:${opcDate}`;
          const cellStatus = rowData ? rowData.status : '';

          // Click handler for the cell
          const handleClick = () => {
            alert(`Clicked on ${dateStr}: ${rowData.objectName} - ${cellStatus}`);
          };

          // Determine cell background color based on status
          const cellBackgroundColor = setCellColor(cellStatus);

          return (
            <Typography>
              <Chip
                label={cellValue}
                onClick={handleClick}
                sx={{
                  backgroundColor: cellBackgroundColor,
                  color: 'black',
                  cursor: 'pointer',
                }}
              />
            </Typography>
          );
        },
      })),
    ];
  }, [activityStartDate, activityEndDate]);

  const tableData = useMemo(() => {
    if (!activityStartDate || !activityEndDate || !data) return [];

    const dates = eachDayOfInterval({
      start: activityStartDate,
      end: activityEndDate,
    });

    return data.map((item) => {
      return dates.reduce((acc, date) => {
        const formattedDate = format(date, 'dd/MM/yyyy');
        acc[formattedDate] =
          item.date === format(date, 'yyyyMMdd') ? item.vacation : '-';
        acc['objectName'] = item.objectName;
        return acc;
      }, {});
    });
  }, [activityStartDate, activityEndDate, data]);

  return (
    <ObjectTable
      objectColumns={columns}
      data={tableData}
      pageSize={5}
      showActions={false}
      enableExpandAll={false}
    />
  );
};
