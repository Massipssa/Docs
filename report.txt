import org.scalatest.funsuite.AnyFunSuite
import java.time.LocalDate

class ControlVersionUtilsTest extends AnyFunSuite {

  case class ControlVersionRow(expectedDate: LocalDate)

  // Mock the method used in your code
  implicit class RichControlVersionRow(row: ControlVersionRow) {
    def getMetadataExpectedUpdateDate: LocalDate = row.expectedDate
  }

  def compareControlVersionRowsOnExpectedUpdateDate(
    controlVersionRow1: ControlVersionRow,
    controlVersionRow2: ControlVersionRow
  ): Boolean = {
    val date1 = Option(controlVersionRow1.getMetadataExpectedUpdateDate)
    val date2 = Option(controlVersionRow2.getMetadataExpectedUpdateDate)

    (date1, date2) match {
      case (None, None)         => false
      case (None, Some(_))      => false
      case (Some(_), None)      => true
      case (Some(d1), Some(d2)) => d1.isBefore(d2)
    }
  }

  test("Both dates are null") {
    val row1 = ControlVersionRow(null)
    val row2 = ControlVersionRow(null)
    assert(compareControlVersionRowsOnExpectedUpdateDate(row1, row2) === false)
  }

  test("First date is null, second is not") {
    val row1 = ControlVersionRow(null)
    val row2 = ControlVersionRow(LocalDate.of(2024, 1, 1))
    assert(compareControlVersionRowsOnExpectedUpdateDate(row1, row2) === false)
  }

  test("Second date is null, first is not") {
    val row1 = ControlVersionRow(LocalDate.of(2024, 1, 1))
    val row2 = ControlVersionRow(null)
    assert(compareControlVersionRowsOnExpectedUpdateDate(row1, row2) === true)
  }

  test("First date is before second") {
    val row1 = ControlVersionRow(LocalDate.of(2023, 1, 1))
    val row2 = ControlVersionRow(LocalDate.of(2024, 1, 1))
    assert(compareControlVersionRowsOnExpectedUpdateDate(row1, row2) === true)
  }

  test("First date is after second") {
    val row1 = ControlVersionRow(LocalDate.of(2025, 1, 1))
    val row2 = ControlVersionRow(LocalDate.of(2024, 1, 1))
    assert(compareControlVersionRowsOnExpectedUpdateDate(row1, row2) === false)
  }

  test("Both dates are equal") {
    val row1 = ControlVersionRow(LocalDate.of(2024, 1, 1))
    val row2 = ControlVersionRow(LocalDate.of(2024, 1, 1))
    assert(compareControlVersionRowsOnExpectedUpdateDate(row1, row2) === false)
  }
}
