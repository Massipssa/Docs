import com.amazonaws.services.s3.AmazonS3
import com.amazonaws.services.s3.AmazonS3ClientBuilder
import com.amazonaws.services.s3.model._

import java.io.InputStream
import scala.collection.mutable.ListBuffer

object S3MultipartUpload {
  
  val bucketName = "your-bucket-name"
  val partSize = 5 * 1024 * 1024 // 5MB per part

  def uploadInputStream(s3Client: AmazonS3, key: String, inputStream: InputStream, contentLength: Long): Unit = {
    var uploadId: String = null
    val partETags = ListBuffer[PartETag]()
    
    try {
      // Step 1: Initiate Multipart Upload
      val initRequest = new InitiateMultipartUploadRequest(bucketName, key)
      val initResponse = s3Client.initiateMultipartUpload(initRequest)
      uploadId = initResponse.getUploadId

      // Step 2: Upload parts
      val buffer = new Array[Byte](partSize)
      var bytesRead = 0
      var partNumber = 1

      while ({
        bytesRead = inputStream.read(buffer)
        bytesRead != -1
      }) {
        val partInputStream = new java.io.ByteArrayInputStream(buffer, 0, bytesRead)
        val uploadPartRequest = new UploadPartRequest()
          .withBucketName(bucketName)
          .withKey(key)
          .withUploadId(uploadId)
          .withPartNumber(partNumber)
          .withInputStream(partInputStream)
          .withPartSize(bytesRead)

        val uploadPartResult = s3Client.uploadPart(uploadPartRequest)
        partETags.append(uploadPartResult.getPartETag)

        println(s"Uploaded part $partNumber, size: $bytesRead bytes")
        partNumber += 1
      }

      // Step 3: Complete Multipart Upload
      val completeRequest = new CompleteMultipartUploadRequest(bucketName, key, uploadId, partETags.toList)
      s3Client.completeMultipartUpload(completeRequest)

      println(s"Upload of $key completed successfully!")

    } catch {
      case e: Exception =>
        println(s"Upload failed: ${e.getMessage}")
        if (uploadId != null) {
          s3Client.abortMultipartUpload(new AbortMultipartUploadRequest(bucketName, key, uploadId))
          println("Aborted multipart upload due to error")
        }
    }
  }

  def main(args: Array[String]): Unit = {
    val s3Client: AmazonS3 = AmazonS3ClientBuilder.standard().build()
    val key = s"uploads/${java.util.UUID.randomUUID()}.txt"

    // Simulate an
