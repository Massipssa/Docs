try {
    // Fetch all project CREs
    List<ProjectCre> projectCres = projectCreRepository.findAll();

    // Fetch the lists of not received critical and non-critical CREs
    ReceptionCreDto receptionCreDto = receptionService.getNotReceivedCre(opcDate, fileType);
    List<CreDto> notReceivedCritical = receptionCreDto.expectedCriticalNotReceived();
    List<CreDto> notReceivedNotCritical = receptionCreDto.expectedNotCriticalNotReceived();

    // Stream through the project list and map each project with its CRE info
    return projectCres.stream().collect(Collectors.groupingBy(pc -> pc.getProject().getName())) // Group by project name
        .entrySet().stream()
        .map(entry -> {
            String projectName = entry.getKey();
            List<ProjectCre> projectCreList = entry.getValue();

            // Separate critical and non-critical CREs for this project
            List<CreDto> criticalCres = projectCreList.stream()
                .filter(pc -> "C".equals(pc.getCritical())) // Assuming 'C' represents critical
                .map(ProjectCre::getCre) // Get CRE details
                .collect(Collectors.toList());

            List<CreDto> nonCriticalCres = projectCreList.stream()
                .filter(pc -> !"C".equals(pc.getCritical())) // Not critical if it's not 'C'
                .map(ProjectCre::getCre) // Get CRE details
                .collect(Collectors.toList());

            // Check if critical CREs are present in the notReceivedCritical list
            List<CreDto> criticalNotReceived = criticalCres.stream()
                .filter(cre -> notReceivedCritical.stream()
                    .anyMatch(notReceived -> notReceived.getCre().equals(cre)))
                .collect(Collectors.toList());

            // Check if non-critical CREs are present in the notReceivedNotCritical list
            List<CreDto> nonCriticalNotReceived = nonCriticalCres.stream()
                .filter(cre -> notReceivedNotCritical.stream()
                    .anyMatch(notReceived -> notReceived.getCre().equals(cre)))
                .collect(Collectors.toList());

            // Return a new DTO for this project with filtered CREs
            return new ProjectDto(projectName, criticalNotReceived, nonCriticalNotReceived);
        }).collect(Collectors.toList());

} catch (Exception e) {
    throw e;
}
