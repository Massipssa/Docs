import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers
import org.mockito.Mockito._
import org.mockito.ArgumentMatchers._
import org.scalatestplus.mockito.MockitoSugar

class S3UtilSpec extends AnyFlatSpec with Matchers with MockitoSugar {

  "splitKey" should "split a valid object key by delimiter" in {
    val objectKey = "folder/subfolder/file.txt"
    val result = S3Util.splitKey(objectKey)
    result shouldEqual List("folder", "subfolder", "file.txt")
  }

  it should "return empty list for null or empty key" in {
    S3Util.splitKey(null) shouldEqual List.empty
    S3Util.splitKey("") shouldEqual List.empty
  }

  "containsKeyPart" should "return true if key part exists in object key" in {
    val objectKey = "data/2025/report.csv"
    S3Util.containsKeyPart(objectKey, "2025") shouldBe true
  }

  it should "return false if key part does not exist" in {
    S3Util.containsKeyPart("data/2025/report.csv", "2024") shouldBe false
  }

  it should "return false if any input is null or empty" in {
    S3Util.containsKeyPart(null, "2025") shouldBe false
    S3Util.containsKeyPart("data/2025/report.csv", "") shouldBe false
  }

  "delete" should "call deleteObject on s3Client" in {
    implicit val jobConfig: JobConfig = JobConfig("test-bucket")
    val mockS3Client = mock[S3Client]
    S3Util.s3Client = mockS3Client // assuming you made this mutable for testability

    val key = "folder/file.txt"
    S3Util.delete(key)

    verify(mockS3Client).deleteObject(argThat { req =>
      req.getBucketName == "test-bucket" && req.getKey == key
    })
  }
}
