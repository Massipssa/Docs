import React, { useState } from 'react';
import {
  Box,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Checkbox,
  ListItemText,
  OutlinedInput,
  IconButton,
  ListSubheader,
} from '@mui/material';
import ClearIcon from '@mui/icons-material/Clear';

const options = [
  'Option 1',
  'Option 2',
  'Option 3',
  'Option 4',
  'Option 5',
  'Option 6',
  'Option 7',
  'Option 8',
  'Option 9',
  'Option 10',
];

function MultiChoiceDropdown() {
  const [selectedOptions, setSelectedOptions] = useState([]);

  const handleChange = (event) => {
    const { target: { value } } = event;
    const newSelectedOptions = typeof value === 'string' ? value.split(',') : value;

    // Select all if any option is selected
    if (newSelectedOptions.length > selectedOptions.length) {
      setSelectedOptions(options);
    } else {
      setSelectedOptions(newSelectedOptions);
    }
  };

  const handleSelectAll = () => {
    if (selectedOptions.length === options.length) {
      setSelectedOptions([]); // Deselect all if already selected
    } else {
      setSelectedOptions(options); // Select all options
    }
  };

  const handleClearSelection = () => {
    setSelectedOptions([]);
  };

  return (
    <Box sx={{ width: 300, mb: 2 }}>
      <FormControl fullWidth>
        <InputLabel id="multi-select-label">Select Options</InputLabel>
        <Box display="flex" alignItems="center">
          <Select
            labelId="multi-select-label"
            multiple
            value={selectedOptions}
            onChange={handleChange}
            input={<OutlinedInput label="Select Options" />}
            renderValue={(selected) => selected.join(', ')}
            sx={{ flexGrow: 1 }}
            MenuProps={{
              PaperProps: {
                style: {
                  maxHeight: 300,
                  width: 300,
                },
              },
            }}
          >
            {/* Select All Option */}
            <MenuItem value="select-all" onClick={handleSelectAll}>
              <Checkbox
                checked={selectedOptions.length === options.length}
                indeterminate={selectedOptions.length > 0 && selectedOptions.length < options.length}
              />
              <ListItemText primary="Select All" />
            </MenuItem>

            {/* All Options */}
            {options.map((option) => (
              <MenuItem key={option} value={option}>
                <Checkbox checked={selectedOptions.indexOf(option) > -1} />
                <ListItemText primary={option} />
              </MenuItem>
            ))}
          </Select>
          <IconButton onClick={handleClearSelection} sx={{ ml: 1 }}>
            <ClearIcon />
          </IconButton>
        </Box>
      </FormControl>
    </Box>
  );
}

export default MultiChoiceDropdown;
