return integrations.stream()
    // Group by opcDate and vacation
    .collect(Collectors.groupingBy(
        ReportingIntegration::getOpcDate,
        Collectors.groupingBy(ReportingIntegration::getVacation)
    ))
    .entrySet().stream()
    .flatMap(opcEntry -> {
        String opcDate = opcEntry.getKey();
        
        return opcEntry.getValue().entrySet().stream().map(vacationEntry -> {
            Integer vacation = vacationEntry.getKey(); // Assuming vacation is Integer
            
            List<ReportingIntegration> group = vacationEntry.getValue();
            ReportingIntegration lastIntegration = getLastIntegration(group);
            
            // Return a new VacationDto object
            return new VacationDto(
                opcDate,
                vacation,
                group.size(), // Count of objects in the group
                lastIntegration.getStatus(),
                lastIntegration.getTimestamp(),
                lastIntegration.getTimestampOfReception()
            );
        });
    })
    .collect(Collectors.toList());
