import React, { createContext, useState, useEffect } from 'react';
import { useQuery } from 'react-query';

// Create the context
export const CreContext = createContext();

// Fetch API data based on submitted values (integrationDate, activityDate, etc.)
const fetchCreData = async (submittedValues) => {
  const { integrationDate, activityDate, frequency, project } = submittedValues;
  const response = await fetch(
    `your-api-url?integrationDate=${integrationDate}&activityDate=${activityDate}&frequency=${frequency}&project=${project}`
  ); // Modify URL as needed
  if (!response.ok) {
    throw new Error('Error fetching data');
  }
  return response.json();
};

// Provider component
export const CreProvider = ({ children }) => {
  const [submittedValues, setSubmittedValues] = useState(null);

  // Use React Query to fetch data when submittedValues changes
  const { data, error, isLoading } = useQuery(
    ['creData', submittedValues],
    () => fetchCreData(submittedValues),
    {
      enabled: !!submittedValues, // Only fetch when values are submitted
    }
  );

  // State to hold both critiques and non-critiques by default
  const [combinedCreData, setCombinedCreData] = useState([]);

  // State to hold filtered data
  const [filteredCreData, setFilteredCreData] = useState([]);

  // Populate both critiques and non-critiques data when fetched
  useEffect(() => {
    if (data) {
      const combined = [
        ...(data.expectedNotCriticalNotReceived || []),
        ...(data.expectedCriticalNoReceived || [])
      ];
      setCombinedCreData(combined); // Set combined data by default
      setFilteredCreData(combined); // Show combined by default in the table
    }
  }, [data]);

  // Function to filter non-critiques
  const filterNonCritiqueData = () => {
    if (data && data.expectedNotCriticalNotReceived) {
      setFilteredCreData(data.expectedNotCriticalNotReceived);
    }
  };

  // Function to filter critiques
  const filterCritiqueData = () => {
    if (data && data.expectedCriticalNoReceived) {
      setFilteredCreData(data.expectedCriticalNoReceived);
    }
  };

  return (
    <CreContext.Provider value={{
      filteredCreData,
      combinedCreData,
      filterNonCritiqueData,
      filterCritiqueData,
      setSubmittedValues,
      isLoading,
      error
    }}>
      {children}
    </CreContext.Provider>
  );
};
