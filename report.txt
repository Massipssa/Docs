import org.scalatest.funsuite.AnyFunSuite
import org.apache.spark.sql.{SparkSession, DataFrame}
import fr.ccf.job.integration.checks.monitoring.CommonMonitoringCheck

class CommonMonitoringCheckVacationTest extends AnyFunSuite {

  val spark: SparkSession = SparkSession.builder()
    .master("local[*]")
    .appName("CommonMonitoringCheckVacationTest")
    .getOrCreate()

  import spark.implicits._

  def createDfWithVacation(vac: Int): DataFrame = {
    Seq((vac)).toDF("vacation")
  }

  test("vacationNumberCheck returns None when vacation matches") {
    val df = createDfWithVacation(2)
    val result = CommonMonitoringCheck.vacationNumberCheck(df, 2, "FLAG1", "monitoringFile1")
    assert(result.isEmpty)
  }

  test("vacationNumberCheck returns Some when vacation mismatches") {
    val df = createDfWithVacation(3)
    val result = CommonMonitoringCheck.vacationNumberCheck(df, 2, "FLAG2", "monitoringFile2")
    assert(result.isDefined)
    assert(result.get.message.contains("Vacation"))
  }

  test("vacationNumberCheck returns error when DataFrame is empty") {
    val emptyDF = spark.emptyDataFrame
    val result = CommonMonitoringCheck.vacationNumberCheck(emptyDF, 1, "FLAG3", "monitoringFile3")
    assert(result.isDefined)
    assert(result.get.message.contains("Could not create a valid object"))
  }
}
