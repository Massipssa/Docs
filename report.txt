import React, { useState } from 'react';
import {
  Box,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Checkbox,
  ListItemText,
  OutlinedInput,
  TextField,
  ListSubheader,
  IconButton,
} from '@mui/material';
import ClearIcon from '@mui/icons-material/Clear';

const options = [
  'Option 1',
  'Option 2',
  'Option 3',
  'Option 4',
  'Option 5',
  'Option 6',
  'Option 7',
  'Option 8',
  'Option 9',
  'Option 10',
];

function MultiChoiceDropdown() {
  const [selectedOptions, setSelectedOptions] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');

  const handleChange = (event) => {
    const { target: { value } } = event;
    setSelectedOptions(typeof value === 'string' ? value.split(',') : value);
  };

  const handleSelectAll = () => {
    if (selectedOptions.length === filteredOptions.length) {
      setSelectedOptions([]); // Deselect all if already selected
    } else {
      setSelectedOptions(filteredOptions); // Select all visible options
    }
  };

  const handleClearSelection = () => {
    setSelectedOptions([]);
  };

  const filteredOptions = options.filter((option) =>
    option.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <Box sx={{ width: 300, mb: 2 }}>
      <FormControl fullWidth>
        <InputLabel id="multi-select-label">Select Options</InputLabel>
        <Select
          labelId="multi-select-label"
          multiple
          value={selectedOptions}
          onChange={handleChange}
          input={<OutlinedInput label="Select Options" />}
          renderValue={(selected) => selected.join(', ')}
          MenuProps={{
            PaperProps: {
              style: {
                maxHeight: 300,
                width: 300,
              },
            },
          }}
        >
          {/* Search Field with Clear Button */}
          <ListSubheader>
            <Box display="flex" alignItems="center">
              <TextField
                size="small"
                placeholder="Search..."
                fullWidth
                variant="outlined"
                onChange={(e) => setSearchQuery(e.target.value)}
              />
              <IconButton onClick={handleClearSelection} sx={{ ml: 1 }}>
                <ClearIcon />
              </IconButton>
            </Box>
          </ListSubheader>

          {/* Select All Option */}
          <MenuItem value="select-all" onClick={handleSelectAll}>
            <Checkbox
              checked={selectedOptions.length === filteredOptions.length && filteredOptions.length > 0}
              indeterminate={selectedOptions.length > 0 && selectedOptions.length < filteredOptions.length}
            />
            <ListItemText primary="Select All" />
          </MenuItem>

          {/* Filtered Options */}
          {filteredOptions.map((option) => (
            <MenuItem key={option} value={option}>
              <Checkbox checked={selectedOptions.indexOf(option) > -1} />
              <ListItemText primary={option} />
            </MenuItem>
          ))}
        </Select>
      </FormControl>
    </Box>
  );
}

export default MultiChoiceDropdown;
