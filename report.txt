import org.scalatest.funsuite.AnyFunSuite
import org.apache.spark.sql.{SparkSession, DataFrame}
import org.apache.spark.sql.functions._
import your.package.{EnteteCdBteToInterfaceEqualityCheck, CreCsvFilenameDto, CheckErrorDto}

class EnteteCdBteToInterfaceEqualityCheckTest extends AnyFunSuite {

  implicit val spark: SparkSession = SparkSession.builder()
    .appName("EqualityCheckTest")
    .master("local[*]")
    .getOrCreate()

  import spark.implicits._

  test("should skip check for CRE ID 3A001") {
    val creDf = Seq(("M6")).toDF("_c1")
    val metadataDf = Seq(("3A001", "M6")).toDF("creId", "codeBoite")
    val creCsvDto = CreCsvFilenameDto("file.csv", "3A001")

    val result = EnteteCdBteToInterfaceEqualityCheck.check(creDf, metadataDf, creCsvDto)
    assert(result.isEmpty)
  }

  test("should return empty list when _c1 matches metadata value") {
    val creDf = Seq(("M6")).toDF("_c1")
    val metadataDf = Seq(("123456", "M6")).toDF("creId", "codeBoite")
    val creCsvDto = CreCsvFilenameDto("file.csv", "123456")

    val result = EnteteCdBteToInterfaceEqualityCheck.check(creDf, metadataDf, creCsvDto)
    assert(result.isEmpty)
  }

  test("should return error when _c1 is different from metadata value") {
    val creDf = Seq(("M7")).toDF("_c1")
    val metadataDf = Seq(("123456", "M6")).toDF("creId", "codeBoite")
    val creCsvDto = CreCsvFilenameDto("file.csv", "123456")

    val result = EnteteCdBteToInterfaceEqualityCheck.check(creDf, metadataDf, creCsvDto)
    assert(result.nonEmpty)
    assert(result.head.value.contains("M7"))
  }
}
