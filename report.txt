def executeRawContentChecks(
  dataKey: String,
  integrationConfig: IntegrationConfig,
  dataChecksSettings: DataChecksSettings
): (Boolean, Option[DataFrame]) = {

  if (!dataChecksSettings.isCheckEnabled(SemicolonDeLimiterCheck.getDescription.id)) {
    logger.info(DISABLED_CHECK_LOG_MSG.format(SemicolonDeLimiterCheck.getDescription.id))
    return (false, None)
  }

  val isValidCsvResult = SemicolonDeLimiterCheck.check(dataKey)

  isValidCsvResult match {
    case Left(validCsvDf) =>
      logger.info("CSV is valid")
      handleValidCsv(validCsvDf, dataChecksSettings)

    case Right(error) =>
      logger.info("Invalid CSV for the CRE")
      fileBasedChecksErrors.append(error)
      (false, None)
  }
}

private def handleValidCsv(
  validCsvDf: DataFrame,
  dataChecksSettings: DataChecksSettings
): (Boolean, Option[DataFrame]) = {

  if (!dataChecksSettings.isCheckEnabled(CsvValidCheck.getDescription.id)) {
    logger.info(DISABLED_CHECK_LOG_MSG.format(CsvValidCheck.getDescription.id))
    return (true, Some(validCsvDf))
  }

  CsvValidCheck.check(validCsvDf) match {
    case Some(error) =>
      fileBasedChecksErrors.append(error)
      (false, None)

    case None =>
      (true, Some(validCsvDf))
  }
}
