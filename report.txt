export const CreProvider = ({ children }) => {
  
  // Helper function to set the title and icon
  const setTitleWithIcon = (title, IconComponent, iconColor) => (
    <Title
      icon={<IconComponent style={{ color: iconColor }} sx={{ mr: 1 }} />}
      title={title}
    />
  );

  // Filter function to filter based on condition and set states
  const filterData = (condition, setTitleFn, setCriticalFn, setCreDataFn, title, IconComponent, iconColor, criticalMark) => {
    if (data && condition) {
      const filteredProjects = projects.filter(condition);
      setFilteredProjects(filteredProjects);
      setFilteredCreData(filteredCreDataFn);
      setCritical(criticalMark);
      setTitleFn(setTitleWithIcon(title, IconComponent, iconColor));
    }
  };

  // Filter received CREs
  const filterReceivedData = () => {
    filterData(
      project => project.received.length > 0 && project.critical.length === 0 && project.notCritical.length === 0,
      setTableTitle,
      setCritical,
      data.expectedReceived,
      'CRE recus',
      CheckCircleIcon,
      'green',
      'R'
    );
  };

  // Filter unexpected CREs
  const filterNotExpectedData = () => {
    filterData(
      project => project.notExpectedReceived.length > 0,
      setTableTitle,
      setCritical,
      data.notExpectedReceived,
      'CRE recus non attendus',
      BlockIcon,
      'black',
      'B'
    );
  };

  // Filter non-critical CREs
  const filterNonCritique = () => {
    filterData(
      project => project.notCritical.length > 0,
      setTableTitle,
      setCritical,
      data.expectedNotCriticalNotReceived,
      'CRE non recus non critiques',
      WarningIcon,
      'yellow',
      'X'
    );
  };

  // Filter critical CREs
  const filterCritique = () => {
    filterData(
      project => project.critical.length > 0,
      setTableTitle,
      setCritical,
      data.expectedCriticalNotReceived,
      'CRE non recus critiques',
      ErrorIcon,
      'red',
      'C'
    );
  };

  useEffect(() => {
    if (data) {
      setNonCritiqueSize(data.expectedNotCriticalNotReceived.length);
      setCritiqueSize(data.expectedCriticalNotReceived.length);
      setReceivedSize(data.expectedReceived.length);
      setNotExpectedSize(data.notExpectedReceived.length);
      setCreData(data);
    }
  }, [data]);

  return (
    <CreContext.Provider
      value={{
        filteredCreData,
        filteredProjects,
        filterReceivedData,
        filterNotExpectedData,
        filterNonCritique,
        filterCritique,
        critiqueSize,
        nonCritiqueSize,
        receivedSize,
        notExpectedSize,
        setSubmittedValues,
        tableTitle,
        projectTitle,
        isLoading,
        error,
        projectLoading,
        projectError,
        critical,
      }}
    >
      {children}
    </CreContext.Provider>
  );
};
