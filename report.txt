
import org.scalatest.funsuite.AnyFunSuite

class VacationUtilTest extends AnyFunSuite {

  test("parseOpcDate should return correct formatted string for valid input") {
    val input = "20250605"
    val expected = Some("year=2025/month=06/day=05")
    assert(VacationUtil.parseOpcDate(input) == expected)
  }

  test("parseOpcDate should return None for invalid length") {
    val input = "202506"
    assert(VacationUtil.parseOpcDate(input).isEmpty)
  }

  test("parseOpcDate should return None for non-digit input") {
    val input = "2025ABCD"
    assert(VacationUtil.parseOpcDate(input).isEmpty)
  }

  test("parseOpcDate should return None for null input") {
    val input: String = null
    assert(VacationUtil.parseOpcDate(input).isEmpty)
  }
}

    val df = spark.createDataFrame(spark.sparkContext.parallelize(testData), schema)

    // Mock SparkUtility
    object MockSparkUtility {
      def loadCsvFromS3(reportKey: String, addRowIdColumn: Boolean, delimiter: String): DataFrame = df
    }

    // Mock isCreRejected logic
    def isCreRejected(fatalDf: DataFrame, key: String): Boolean = {
      fatalDf.filter($"CRE_ID" === key).count() > 0
    }

    // Method under test
    def getDataRejectionsFromReport(dataKeys: List[String], reportKey: String): Map[String, Boolean] = {
      val allErrorsDf = MockSparkUtility.loadCsvFromS3(reportKey, false, ";")
      val fatalErrorsDf = allErrorsDf.filter($"SEVERITY" === "FATAL")

      dataKeys.map(key => key -> isCreRejected(fatalErrorsDf, key)).toMap
    }

    // Run test
    val result = getDataRejectionsFromReport(List("CRE_001", "CRE_002", "CRE_003", "CRE_004"), "mockKey")

    assert(result == Map(
      "CRE_001" -> true,
      "CRE_002" -> false,
      "CRE_003" -> true,
      "CRE_004" -> false
    ))
  }
}
