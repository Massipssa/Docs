import React, { useState } from 'react';
import {
  Box,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Collapse,
  Typography,
} from '@mui/material';
import { ExpandLess, ExpandMore } from '@mui/icons-material';
import GroupIcon from '@mui/icons-material/Group';
import SettingsIcon from '@mui/icons-material/Settings';
import BugReportIcon from '@mui/icons-material/BugReport';
import MergeTypeIcon from '@mui/icons-material/MergeType';
import TaskIcon from '@mui/icons-material/Task';

interface MenuItem {
  title: string;
  icon: React.ReactNode;
  count?: number;
  children?: MenuItem[];
}

const menuItems: MenuItem[] = [
  {
    title: 'Group',
    icon: <GroupIcon />,
    children: [
      { title: 'Pinned' },
      { title: 'Issues', count: 0 },
      { title: 'Merge requests', count: 3 },
      { title: 'Epics', count: 0 },
    ],
  },
  {
    title: 'Manage',
    icon: <TaskIcon />,
    children: [
      { title: 'Activity' },
      { title: 'Members' },
      { title: 'Labels' },
    ],
  },
  {
    title: 'Settings',
    icon: <SettingsIcon />,
    children: [],
  },
];

export default function SidebarMenu() {
  const [selectedIndex, setSelectedIndex] = useState<string | null>(null);
  const [openItems, setOpenItems] = useState<string[]>([]);

  const handleClick = (id: string) => {
    setSelectedIndex(id);
  };

  const handleToggle = (id: string) => {
    if (openItems.includes(id)) {
      setOpenItems(openItems.filter((itemId) => itemId !== id));
    } else {
      setOpenItems([...openItems, id]);
    }
  };

  const renderMenuItem = (item: MenuItem, id: string, level: number = 0) => {
    const hasChildren = item.children && item.children.length > 0;
    const isOpen = openItems.includes(id);

    return (
      <Box key={id}>
        <ListItem
          button
          onClick={() => {
            handleClick(id);
            if (hasChildren) handleToggle(id);
          }}
          sx={{
            bgcolor: selectedIndex === id ? '#d6eaf8' : 'inherit', // Highlight selected item
            borderRadius: '4px',
            marginRight: '2px',
            ':hover': { bgcolor: '#d6eaf8' },
            pl: level * 2, // Indentation for child items
            display: 'flex',
            alignItems: 'center',
          }}
        >
          <ListItemIcon>{item.icon}</ListItemIcon>
          <ListItemText
            primary={
              <Box display="flex" justifyContent="space-between" alignItems="center">
                <Typography>{item.title}</Typography>
                {item.count !== undefined && (
                  <Typography sx={{ ml: 2, fontSize: 12, color: '#757575' }}>
                    {item.count}
                  </Typography>
                )}
              </Box>
            }
          />
          {hasChildren &&
            (isOpen ? <ExpandLess /> : <ExpandMore />)}
        </ListItem>
        {hasChildren && (
          <Collapse in={isOpen} timeout="auto" unmountOnExit>
            <List disablePadding>
              {item.children!.map((child, index) =>
                renderMenuItem(child, `${id}-${index}`, level + 1)
              )}
            </List>
          </Collapse>
        )}
      </Box>
    );
  };

  return (
    <Box
      sx={{
        width: '240px',
        bgcolor: '#f5f5f5',
        height: '100vh',
        boxShadow: '2px 0 5px rgba(0,0,0,0.1)',
      }}
    >
      <List>
        {menuItems.map((item, index) =>
          renderMenuItem(item, `item-${index}`)
        )}
      </List>
    </Box>
  );
}
