import React, { useState } from 'react';
import {
  Box, FormControl, InputLabel, Select, MenuItem, Checkbox, ListItemText, OutlinedInput, TextField, ListSubheader, Button,
} from '@mui/material';

const options = [
  'Option 1',
  'Option 2',
  'Option 3',
  'Option 4',
  'Option 5',
  'Option 6',
  'Option 7',
  'Option 8',
  'Option 9',
  'Option 10',
];

function MultiChoiceDropdown({ selectedOptions, setSelectedOptions }) {
  const [searchQuery, setSearchQuery] = useState('');

  const handleChange = (event) => {
    const {
      target: { value },
    } = event;
    setSelectedOptions(
      typeof value === 'string' ? value.split(',') : value,
    );
  };

  const handleSelectAll = () => {
    if (selectedOptions.length === options.length) {
      setSelectedOptions([]);
    } else {
      setSelectedOptions(options);
    }
  };

  const handleClearSelection = () => {
    setSelectedOptions([]);
  };

  const filteredOptions = options.filter(option =>
    option.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <Box sx={{ width: 300 }}>
      <FormControl fullWidth>
        <InputLabel id="multi-select-label">Select Options</InputLabel>
        <Select
          labelId="multi-select-label"
          multiple
          value={selectedOptions}
          onChange={handleChange}
          input={<OutlinedInput label="Select Options" />}
          renderValue={(selected) => selected.join(', ')}
          MenuProps={{
            PaperProps: {
              style: {
                maxHeight: 300,  // Adjust maxHeight to control the scrollable area
                width: 300,
              },
            },
          }}
        >
          <ListSubheader>
            <TextField
              size="small"
              placeholder="Search..."
              fullWidth
              variant="outlined"
              onChange={(e) => setSearchQuery(e.target.value)}
              sx={{ mb: 1 }}
            />
          </ListSubheader>

          <MenuItem
            value="all"
            onClick={handleSelectAll}
          >
            <Checkbox
              checked={selectedOptions.length === options.length}
              indeterminate={selectedOptions.length > 0 && selectedOptions.length < options.length}
            />
            <ListItemText primary="Select All" />
          </MenuItem>

          {filteredOptions.map((option) => (
            <MenuItem key={option} value={option}>
              <Checkbox checked={selectedOptions.indexOf(option) > -1} />
              <ListItemText primary={option} />
            </MenuItem>
          ))}

          <MenuItem onClick={handleClearSelection}>
            <Button fullWidth variant="outlined" color="secondary">
              Clear Selection
            </Button>
          </MenuItem>
        </Select>
      </FormControl>
    </Box>
  );
}

export default MultiChoiceDropdown;
