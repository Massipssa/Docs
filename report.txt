import React, { useState, useContext } from 'react';
import { Grid, Box, Typography } from '@mui/material';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import WarningAmberIcon from '@mui/icons-material/WarningAmber';
import ErrorIcon from '@mui/icons-material/Error';
import BlockIcon from '@mui/icons-material/Block';
import { CreContext } from '@/context/CreContext';
import StatCard from './StatCard';

// Card details with dynamic icon and color configurations
const cardDetails = [
  {
    key: 'received',
    title: 'Reçus',
    successIcon: CheckCircleIcon,
    errorIcon: ErrorIcon,
    successColor: 'green',
    errorColor: 'red',
    condition: size => size > 0,
  },
  {
    key: 'critique',
    title: 'Critique non reçus',
    successIcon: CheckCircleIcon,
    errorIcon: ErrorIcon,
    successColor: 'green',
    errorColor: 'red',
    condition: size => size === 0,
  },
  {
    key: 'nonCritique',
    title: 'Non Critique non reçus',
    successIcon: CheckCircleIcon,
    warningIcon: WarningAmberIcon,
    successColor: 'green',
    warningColor: 'yellow',
    condition: size => size === 0,
  },
  {
    key: 'notExpected',
    title: 'Non attendus reçus',
    successIcon: CheckCircleIcon,
    blockIcon: BlockIcon,
    successColor: 'green',
    blockColor: 'gray',
    condition: size => size > 0,
  },
];

function CreReceptionStatusCard() {
  const {
    filterCritique,
    filterNonCritique,
    filterReceivedData,
    filterNotExpectedData,
    receivedSize,
    critiqueSize,
    nonCritiqueSize,
    notExpectedSize,
    isLoading,
    error,
  } = useContext(CreContext);

  const [clickedCard, setClickedCard] = useState(null);

  const sizeMapping = {
    received: receivedSize,
    critique: critiqueSize,
    nonCritique: nonCritiqueSize,
    notExpected: notExpectedSize,
  };

  const filterMapping = {
    received: filterReceivedData,
    critique: filterCritique,
    nonCritique: filterNonCritique,
    notExpected: filterNotExpectedData,
  };

  // Helper function to get the correct icon based on size and card settings
  const getIcon = (size, card) => {
    if (card.key === 'nonCritique' && size > 0) {
      return <card.warningIcon style={{ color: card.warningColor }} />;
    }
    return size > 0 ? (
      <card.successIcon style={{ color: card.successColor }} />
    ) : (
      card.errorIcon ? (
        <card.errorIcon style={{ color: card.errorColor }} />
      ) : (
        <card.blockIcon style={{ color: card.blockColor }} />
      )
    );
  };

  // Helper function to get the background color based on size and card settings
  const getBackgroundColor = (size, card) => {
    return clickedCard && clickedCard !== card.key
      ? 'lightgray'
      : card.condition(size)
      ? card.successColor
      : card.errorColor || card.blockColor;
  };

  const handleClick = (cardKey) => {
    setClickedCard(cardKey);
    filterMapping[cardKey](); // Call the appropriate filter method
  };

  if (isLoading) return <div>Loading...</div>; // Replace with loading component
  if (error) return <div>Error: {error}</div>; // Replace with error component

  return (
    <Box sx={{ padding: '20px' }}>
      {/* Cards Section */}
      <Typography variant="h5" gutterBottom>
        CRE Status
      </Typography>
      <Grid container spacing={2}>
        {cardDetails.map((card) => (
          <Grid item key={card.key} xs={12} sm={3}>
            <StatCard
              title={card.title}
              size={sizeMapping[card.key]}
              onClick={() => handleClick(card.key)}
              backgroundColor={getBackgroundColor(sizeMapping[card.key], card)}
              icon={getIcon(sizeMapping[card.key], card)}
              breakLine
            />
          </Grid>
        ))}
      </Grid>
    </Box>
  );
}

export default CreReceptionStatusCard;
