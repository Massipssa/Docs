import java.util.*;
import java.util.stream.Collectors;

public class MissingCreProcessor {

    public static List<ProjectMissingCreDto> processMissingCre(List<MissingCre> missingCreList, List<ProjectCre> projectCreList) {
        // Convert MissingCre list to a set of names for fast lookup
        Set<String> missingCreNames = missingCreList.stream()
                .map(MissingCre::getName)
                .collect(Collectors.toSet());

        // Process the projectCreList
        return projectCreList.stream()
                .filter(projectCre -> missingCreNames.contains(projectCre.getCreName())) // Keep only missing CREs
                .collect(Collectors.groupingBy(
                        ProjectCre::getProjectName,
                        Collectors.teeing(
                                Collectors.summingInt(cre -> "c".equals(cre.getCritical()) ? 1 : 0),
                                Collectors.summingInt(cre -> "x".equals(cre.getCritical()) ? 1 : 0),
                                ProjectMissingCreDto::new
                        )
                ))
                .values()
                .stream()
                .collect(Collectors.toList());
    }

    public static void main(String[] args) {
        // Example missing CREs
        List<MissingCre> missingCreList = List.of(
                new MissingCre("CRE1", "2024-01-01"),
                new MissingCre("CRE2", "2024-01-02"),
                new MissingCre("CRE3", "2024-01-03")
        );

        // Example project CREs
        List<ProjectCre> projectCreList = List.of(
                new ProjectCre("ProjectA", "CRE1", "c"),
                new ProjectCre("ProjectA", "CRE2", "x"),
                new ProjectCre("ProjectB", "CRE2", "c"),
                new ProjectCre("ProjectB", "CRE3", "x"),
                new ProjectCre("ProjectC", "CRE1", "c")
        );

        // Process the data
        List<ProjectMissingCreDto> result = processMissingCre(missingCreList, projectCreList);
        result.forEach(System.out::println);
    }
}
