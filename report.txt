import org.scalatest.funsuite.AnyFunSuite
import org.apache.spark.sql.{SparkSession, DataFrame}
import org.apache.spark.sql.functions.lit
import fr.ccf.job.parser.CommonMonitoringCheck

class CommonMonitoringCheckTest extends AnyFunSuite {

  val spark: SparkSession = SparkSession.builder()
    .master("local[*]")
    .appName("CommonMonitoringCheckTest")
    .getOrCreate()

  import spark.implicits._

  def createDfWithDate(date: String): DataFrame = {
    Seq((date)).toDF("dateTraitement")
  }

  test("dateTraitementCheck returns None when date matches") {
    val df = createDfWithDate("2024-05-01")
    val result = CommonMonitoringCheck.dateTraitementCheck(df, "2024-05-01", "FLAG1", "file1")
    assert(result.isEmpty)
  }

  test("dateTraitementCheck returns Some when date does not match") {
    val df = createDfWithDate("2024-05-02")
    val result = CommonMonitoringCheck.dateTraitementCheck(df, "2024-05-01", "FLAG2", "file2")
    assert(result.isDefined)
    assert(result.get.message.contains("Date Traitement"))
  }

  test("dateTraitementCheck returns error when DataFrame is empty") {
    val emptyDF = spark.emptyDataFrame
    val result = CommonMonitoringCheck.dateTraitementCheck(emptyDF, "2024-05-01", "FLAG3", "file3")
    assert(result.isDefined)
    assert(result.get.message.contains("Could not create a valid object"))
  }
}
