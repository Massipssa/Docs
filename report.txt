import org.scalatest.funsuite.AnyFunSuite
import org.scalatest.matchers.should.Matchers
import org.scalatestplus.mockito.MockitoSugar
import org.mockito.Mockito._
import org.mockito.ArgumentMatchers._
import java.time.LocalDate

class GetOverriddenDateTest extends AnyFunSuite with Matchers with MockitoSugar {

  test("should throw IllegalArgumentException when creType is empty") {
    val jobConfigMock = mock[JobConfigDto]
    
    assertThrows[IllegalArgumentException] {
      getOverriddenDate("", LocalDate.now())(jobConfigMock)
    }
  }

  test("should throw IllegalArgumentException when dateToOverride is null") {
    val jobConfigMock = mock[JobConfigDto]
    
    assertThrows[IllegalArgumentException] {
      getOverriddenDate("validType", null)(jobConfigMock)
    }
  }

  test("should return dateToOverride when creRuleDto.cre_id is null") {
    val jobConfigMock = mock[JobConfigDto]
    val mockCreRuleDto = mock[CreRuleDto]
    
    when(mockCreRuleDto.cre_id).thenReturn(null)
    when(getCreRuleDto(anyString(), anyString())).thenReturn(mockCreRuleDto)

    val result = getOverriddenDate("someType", LocalDate.of(2024, 1, 1))(jobConfigMock)
    result shouldBe LocalDate.of(2024, 1, 1)
  }

  test("should call applyOverrideRules when creRuleDto.cre_id is not null") {
    val jobConfigMock = mock[JobConfigDto]
    val mockCreRuleDto = mock[CreRuleDto]

    when(mockCreRuleDto.cre_id).thenReturn("123")
    when(getCreRuleDto(anyString(), anyString())).thenReturn(mockCreRuleDto)

    val dateToOverride = LocalDate.of(2024, 1, 1)

    val result = getOverriddenDate("someType", dateToOverride)(jobConfigMock)

    verify(applyOverrideRules(mockCreRuleDto, dateToOverride))
  }
}
