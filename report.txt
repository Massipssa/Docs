create view dbt_retail_ccf_hml_database.kpi_test as
with
-- Extract test details
test_details as (
    select
        result.node.unique_id as test_unique_id,
        result.node.name as test_name,
        result.node.alias as test_name_long,
        result.node.schema || '.' || result.node.name as dq_model,
        dq_tools.get_config_severity(result.node) as test_severity_config,
        dq_tools.get_kpi_categorize(result.node) as test_kpi_category_config,
        dq_tools.get_ds_issue_type(result.node) as ds_issue_type,
        dq_tools.get_relation(testing_model_relation) as table_name
),

-- Fetch columns for generic tests
column_info as (
    select
        dq_tools.get_columns_in_relation_custom(testing_model_relation) as table_columns
),

-- Subquery for counting records
record_count as (
    select
        case
            when test_type = 'generic' then (
                select count(*)
                from dq_tools.get_where_subquery(testing_model, result.node.config)
            )
            else null
        end as no_of_records
),

-- Scanned records and metrics
record_metrics as (
    select
        no_of_records_scanned,
        coalesce(failures, 0) as no_of_records_failed,
        test_type,
        result.execution_time as execution_time_seconds,
        result.file.original_file_path || ':' || file.test_defined as file_path,
        dq_target_name as dq_target_name,
        dq_tools.get_invocation_id() as dp_invocation_id,
        current_timestamp() as timestamp
    from result
)

-- Final query assembling the results
select
    td.*,
    ci.*,
    rc.no_of_records,
    rm.no_of_records_scanned,
    rm.no_of_records_failed,
    rm.execution_time_seconds,
    rm.file_path,
    rm.dq_target_name,
    rm.dp_invocation_id,
    rm.timestamp
from test_details td
left join column_info ci on true
left join record_count rc on true
left join record_metrics rm on true;
