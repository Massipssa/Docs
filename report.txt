import org.apache.spark.sql.{Row, SparkSession}
import org.apache.spark.sql.types._
import org.scalatest.funsuite.AnyFunSuite
import org.scalatest.BeforeAndAfterAll
import org.mockito.Mockito._
import org.scalatestplus.mockito.MockitoSugar

class ReferentialPlanningServiceTest extends AnyFunSuite with BeforeAndAfterAll with MockitoSugar {

  private var spark: SparkSession = _

  override def beforeAll(): Unit = {
    spark = SparkSession.builder()
      .master("local[*]")
      .appName("Test")
      .getOrCreate()
  }

  override def afterAll(): Unit = {
    spark.stop()
  }

  test("getMapFromReferentialPlanningDataFrame should correctly map rows when SparkUtility is mocked") {

    // Mock data to return
    val schema = StructType(Seq(
      StructField("id", StringType, nullable = false),
      StructField("type", StringType, nullable = false),
      StructField("frequency", StringType, nullable = false)
    ))

    val data = Seq(
      Row("P1", "TYPE1", "DAILY"),
      Row("P2", "TYPE2", "WEEKLY")
    )

    val df = spark.createDataFrame(spark.sparkContext.parallelize(data), schema)

    // Mock SparkUtility
    val mockedSparkUtility = mock[SparkUtility.type]
    when(mockedSparkUtility.loadCsvConfigurationFile("dummy_file")).thenReturn(df)

    // Constants
    val ID_COLUMN_PLANNING = "id"
    val TYPE_COLUMN_PLANNING = "type"
    val FREQUENCY_COLUMN_PLANNING = "frequency"

    // Test method using the mock
    def getMapFromReferentialPlanningDataFrame(sparkUtility: SparkUtility.type): Map[String, ReferentialPlanningDto] = {
      val referentialPlanningFileDf = sparkUtility.loadCsvConfigurationFile("dummy_file")

      referentialPlanningFileDf.collect()
        .map { row =>
          val id = row.getAs[String](ID_COLUMN_PLANNING)
          val tpe = row.getAs[String](TYPE_COLUMN_PLANNING)
          val freq = row.getAs[String](FREQUENCY_COLUMN_PLANNING)
          id -> ReferentialPlanningDto(id, tpe, freq)
        }.toMap
    }

    val result = getMapFromReferentialPlanningDataFrame(mockedSparkUtility)

    val expected = Map(
      "P1" -> ReferentialPlanningDto("P1", "TYPE1", "DAILY"),
      "P2" -> ReferentialPlanningDto("P2", "TYPE2", "WEEKLY")
    )

    assert(result == expected)
  }
}
