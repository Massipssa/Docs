import org.scalatest.funsuite.AnyFunSuite
import org.scalatestplus.mockito.MockitoSugar
import org.mockito.Mockito._
import org.mockito.ArgumentMatchers._

class MetadataUtilityTest extends AnyFunSuite with MockitoSugar {

  implicit val jobConfig: JobConfigDto = mock[JobConfigDto]

  test("should return metadata file key when exactly one key is found") {
    val batchName = "testBatch"
    val appZone = "zone"
    val s3Key = "zone/testBatch"
    val metadataKey = "zone/testBatch/meta/file1.json"

    // Mocking S3Utility
    val s3Util = mock[S3Utility.type]
    when(S3Utility.createS3Key(List(appZone, batchName))).thenReturn(s3Key)
    when(S3Utility.listAllKeys(s3Key)).thenReturn(List(metadataKey))
    when(S3Utility.containsKeyPart(metadataKey, StorageConstants.METADATA_FOLDER)).thenReturn(true)

    val result = MetadataUtility.getMetadataKeyForBatch(batchName, appZone)
    assert(result == metadataKey)
  }

  test("should throw NoSuchElementException when no metadata file is found") {
    val batchName = "emptyBatch"
    val s3Key = "zone/emptyBatch"

    when(S3Utility.createS3Key(any())).thenReturn(s3Key)
    when(S3Utility.listAllKeys(s3Key)).thenReturn(List())

    val exception = intercept[NoSuchElementException] {
      MetadataUtility.getMetadataKeyForBatch(batchName)
    }

    assert(exception.getMessage.contains("No METADATA file found"))
  }

  test("should throw IllegalStateException when multiple metadata files are found") {
    val batchName = "multiBatch"
    val s3Key = "zone/multiBatch"
    val keys = List("file1.json", "file2.json")

    when(S3Utility.createS3Key(any())).thenReturn(s3Key)
    when(S3Utility.listAllKeys(s3Key)).thenReturn(keys)
    when(S3Utility.containsKeyPart(anyString(), anyString())).thenReturn(true)

    val exception = intercept[IllegalStateException] {
      MetadataUtility.getMetadataKeyForBatch(batchName)
    }

    assert(exception.getMessage.contains("Multiple METADATA files"))
  }

  test("should throw IllegalArgumentException when batchName is empty") {
    val exception = intercept[IllegalArgumentException] {
      MetadataUtility.getMetadataKeyForBatch("")
    }

    assert(exception.getMessage.contains("Invalid arguments"))
  }
}
