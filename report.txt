import org.apache.spark.sql.{DataFrame, SparkSession}
import org.scalatest.funsuite.AnyFunSuite
import org.scalatest.matchers.should.Matchers

class MetadataReceivedMetadataEqualityCheckTest extends AnyFunSuite with Matchers {

  val spark: SparkSession = SparkSession.builder()
    .appName("UnitTest")
    .master("local[*]")
    .getOrCreate()

  import spark.implicits._

  test("check should return error when metadataDF or monitoringMetadataDF is empty") {
    val metadataDF = spark.emptyDataFrame
    val monitoringMetadataDF = spark.emptyDataFrame

    val result = MetadataReceivedMetadataEqualityCheck.check(metadataDF, monitoringMetadataDF)
    result.isDefined shouldBe true
    result.get.message should include("Could not create a valid object")
  }

  test("check should return error when counts are different") {
    val metadataDF = Seq(
      ("data1"), ("data2")
    ).toDF("value")

    val monitoringMetadataDF = Seq(
      ("nbCRE", "3")  // 3 is different from 2 rows in metadataDF
    ).toDF("key", "value")

    val result = MetadataReceivedMetadataEqualityCheck.check(
      metadataDF,
      monitoringMetadataDF.withColumnRenamed("value", "nbCRE")  // expected column
    )

    result.isDefined shouldBe true
    result.get.message should include("Number of Metadata in batch")
  }

  test("check should return None when counts are equal") {
    val metadataDF = Seq(
      ("data1"), ("data2")
    ).toDF("value")

    val monitoringMetadataDF = Seq(
      ("nbCRE", "2")
    ).toDF("key", "value")
      .withColumnRenamed("value", "nbCRE") // match expected col name

    val result = MetadataReceivedMetadataEqualityCheck.check(
      metadataDF,
      monitoringMetadataDF
    )

    result shouldBe None
  }
}
