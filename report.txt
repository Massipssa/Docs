import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions._
import org.apache.spark.sql.Row
import org.apache.spark.sql.types._

class EnteteDaValToInterfaceEqualityCheckTest extends AnyFlatSpec with Matchers {

  implicit val spark: SparkSession = SparkSession.builder()
    .master("local[*]")
    .appName("Test")
    .getOrCreate()

  import spark.implicits._

  "check" should "return no errors when all values are equal" in {
    val creDF = Seq(
      ("2024-06-01", "1001"),
      ("2024-06-01", "1002")
    ).toDF("ENTETE-DA-VAL", "ENTETE-NO")

    val metadataDF = Seq(
      ("1001", "2024-06-01")
    ).toDF("creId", "interface.dateMaj")

    val dto = CreCsvFilenameDto("1001")

    val result = EnteteDaValToInterfaceEqualityCheck
      .check(creDF, metadataDF, dto)

    result shouldBe empty
  }

  it should "return errors when values are different" in {
    val creDF = Seq(
      ("2024-06-01", "1001"),
      ("2024-06-02", "1002")
    ).toDF("ENTETE-DA-VAL", "ENTETE-NO")

    val metadataDF = Seq(
      ("1001", "2024-06-01")
    ).toDF("creId", "interface.dateMaj")

    val dto = CreCsvFilenameDto("1001")

    val result = EnteteDaValToInterfaceEqualityCheck
      .check(creDF, metadataDF, dto)

    result should have size 1
    result.head.getColumnName should contain ("ENTETE-DA-VAL")
  }
}
