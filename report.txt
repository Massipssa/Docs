import React, { createContext, useState } from 'react';
import { useQuery } from 'react-query';

// Create the context
export const CreContext = createContext();

// Fetch API data based on the selected date
const fetchCreData = async (date) => {
  const response = await fetch(`your-api-url?date=${date}`); // Use the selected date in the API call
  if (!response.ok) {
    throw new Error('Error fetching data');
  }
  return response.json();
};

// Provider component
export const CreProvider = ({ children }) => {
  // State to hold the selected date
  const [selectedDate, setSelectedDate] = useState(null);

  // Use React Query to fetch data when the date changes
  const { data, error, isLoading } = useQuery(
    ['creData', selectedDate],
    () => fetchCreData(selectedDate),
    {
      enabled: !!selectedDate, // Only fetch when a date is selected
    }
  );

  // State to hold filtered data
  const [filteredCreData, setFilteredCreData] = useState([]);

  // Function to filter non-critiques
  const filterNonCritiqueData = () => {
    if (data && data.expectedNotCriticalNotReceived) {
      setFilteredCreData(data.expectedNotCriticalNotReceived);
    }
  };

  // Function to filter critiques
  const filterCritiqueData = () => {
    if (data && data.expectedCriticalNoReceived) {
      setFilteredCreData(data.expectedCriticalNoReceived);
    }
  };

  return (
    <CreContext.Provider value={{
      filteredCreData,
      filterNonCritiqueData,
      filterCritiqueData,
      setSelectedDate,
      isLoading,
      error
    }}>
      {children}
    </CreContext.Provider>
  );
};



