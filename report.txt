import React, { useState, useRef } from 'react';
import { Tabs, Tab, Box, Container } from '@mui/material';

// Components for each tab
import SyntheseFilter from 'components/Dashboard/Common/Filter/SyntheseFilter';
import IntegrationFilter from 'components/Dashboard/Common/Filter/IntegrationFilter';
import VacationFilter from 'components/Dashboard/Common/Filter/VacationFilter';
import ReturnFlowFilter from 'components/Dashboard/Common/Filter/ReturnFlowFilter';

// Tab panel component
function TabPanel({ children, value, index, ...other }) {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`tabpanel-${index}`}
      aria-labelledby={`tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box p={3}>
          {children}
        </Box>
      )}
    </div>
  );
}

// Main tabs component
const MyTabs = () => {
  const [value, setValue] = useState(0);
  const tabsRef = useRef([]);

  const handleChange = (event, newValue) => {
    setValue(newValue);

    // Remove the focus from the tab after click
    if (tabsRef.current[newValue]) {
      tabsRef.current[newValue].blur();
    }
  };

  const components = [
    <SyntheseFilter />,
    <IntegrationFilter />,
    <VacationFilter />,
    <ReturnFlowFilter />
  ];

  return (
    <Container maxWidth={false} sx={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <Tabs
          value={value}
          onChange={handleChange}
          aria-label="basic tabs"
          variant="scrollable"
          scrollButtons="auto"
          sx={{ alignItems: 'flex-start', display: 'flex' }}
        >
          {['Synthèse', 'Intégration CRE', 'Intégration Vacation', 'Retour flux'].map((tab, index) => (
            <Tab
              key={index}
              ref={(el) => (tabsRef.current[index] = el)}
              label={tab}
              sx={{
                textTransform: 'none',
                bgcolor: value === index ? 'lightgray' : 'transparent',
                outline: 'none',
                '&:focus': { outline: 'none' },
                '&:hover': { backgroundColor: 'lightgray' }
              }}
              disableRipple
            />
          ))}
        </Tabs>
      </Box>

      {/* Render components based on selected tab */}
      {components.map((component, index) => (
        <TabPanel key={index} value={value} index={index}>
          {component}
        </TabPanel>
      ))}
    </Container>
  );
};

export default MyTabs;
