import React, { useState } from 'react';
import { Card, CardContent, Typography, Box, List, ListItem, ListItemText } from '@mui/material';
import { PieChart, PieSeries } from '@mui/x-charts';
import { DateRangePicker } from '@mui/x-date-pickers-pro';
import dayjs from 'dayjs';

// Sample data for the pies
const dataSets = [
  { id: 1, total: 100, warning: 20, failed: 30, passed: 50, date: '2023-09-01' },
  { id: 2, total: 150, warning: 40, failed: 30, passed: 80, date: '2023-09-05' },
  { id: 3, total: 200, warning: 50, failed: 60, passed: 90, date: '2023-09-10' },
  { id: 4, total: 250, warning: 70, failed: 80, passed: 100, date: '2023-09-12' },
];

// Colors for pie chart slices
const pieColors = ['#FFCC00', '#FF5252', '#4CAF50'];

const PieCard = ({ data, onPercentageClick }) => {
  const pieData = [
    { id: 'Warning', value: data.warning, color: pieColors[0] },
    { id: 'Failed', value: data.failed, color: pieColors[1] },
    { id: 'Passed', value: data.passed, color: pieColors[2] },
  ];

  return (
    <Card sx={{ width: 300, margin: '0 10px', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
      <CardContent>
        <Typography variant="h6" align="center" gutterBottom>
          Check Results
        </Typography>

        {/* Center the Pie Chart */}
        <Box sx={{ position: 'relative', height: '250px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
          <PieChart
            series={[
              {
                innerRadius: 40,
                outerRadius: 80,
                data: pieData,
                valueKey: 'value',
                idKey: 'id',
                colorKey: 'color',
              },
            ]}
            width={200}
            height={200}
            sx={{ display: 'flex', justifyContent: 'center' }}
          />

          {/* Display total checks in the center */}
          <Typography
            variant="h6"
            align="center"
            sx={{
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              pointerEvents: 'none',
            }}
          >
            {data.total} Checks
          </Typography>
        </Box>

        {/* Legend with clickable percentages */}
        <List sx={{ display: 'flex', justifyContent: 'center', paddingTop: 2 }}>
          {pieData.map((item) => (
            <ListItem key={item.id} disablePadding>
              <ListItemText
                primary={`${item.id}: ${(item.value / data.total * 100).toFixed(2)}%`}
                onClick={() => onPercentageClick(item.id, item.value)}
                sx={{ cursor: 'pointer', '&:hover': { textDecoration: 'underline' } }} // Add hover effect
              />
            </ListItem>
          ))}
        </List>
      </CardContent>
    </Card>
  );
};

const App = () => {
  const [dateRange, setDateRange] = useState([dayjs().subtract(7, 'days'), dayjs()]);
  const [filteredData, setFilteredData] = useState(dataSets);

  const handleDateRangeChange = (newValue) => {
    setDateRange(newValue);
    const [start, end] = newValue;
    const filtered = dataSets.filter((data) => {
      const date = dayjs(data.date);
      return date.isAfter(start) && date.isBefore(end);
    });
    setFilteredData(filtered);
  };

  const handlePercentageClick = (checkType, value) => {
    // Example action: Log the clicked percentage type and value
    console.log(`Clicked on ${checkType}: ${value} checks`);
    // You can replace this with other actions, like filtering the data further or navigating to another page
  };

  return (
    <Box>
      {/* Date Range Filter */}
      <Box sx={{ display: 'flex', justifyContent: 'center', marginBottom: 3 }}>
        <DateRangePicker
          startText="Start Date"
          endText="End Date"
          value={dateRange}
          onChange={handleDateRangeChange}
          sx={{ width: '400px' }}
        />
      </Box>

      {/* Display Pie Cards */}
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          padding: 2,
          flexWrap: 'nowrap',
        }}
      >
        {filteredData.length > 0 ? (
          filteredData.map((data) => (
            <PieCard key={data.id} data={data} onPercentageClick={handlePercentageClick} />
          ))
        ) : (
          <Typography>No data available for the selected date range.</Typography>
        )}
      </Box>
    </Box>
  );
};

export default App;
