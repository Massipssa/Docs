val errors = invalidCases.map { row =>
  val rowId = row.getAs[Any](ROW_NUMBER_COL).toString

  // Pour chaque colonne, vÃ©rifier si elle est invalide
  val columnErrors = validations.keys.flatMap { colName =>
    val isValidCol = isValidColName(colName)
    val isValid = Option(row.getAs[Any](isValidCol)).exists(_.toString == "true")

    if (!isValid) {
      val actual = Option(row.getAs[Any](colName)).map(_.toString).getOrElse("null")
      val expected = validations(colName).expr.sql

      Some(CheckErrorDto(
        Option(rowId),
        Option(colName),
        Option(actual),
        Option(expected),
        getDescription(colName)
      ))
    } else {
      None
    }
  }

  columnErrors
}.flatten.toList
