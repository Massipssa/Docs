import org.scalatest.funsuite.AnyFunSuite
import org.apache.spark.sql.{SparkSession, DataFrame}
import org.apache.spark.sql.functions._
import your.package.EnteteTmstpToFilenameEqualityCheck
import your.package.CreCsvFilenameDto
import your.package.CheckErrorDto

class EnteteTmstpToFilenameEqualityCheckTest extends AnyFunSuite {

  val spark: SparkSession = SparkSession.builder()
    .appName("EnteteTimestampCheckTest")
    .master("local[*]")
    .getOrCreate()

  import spark.implicits._

  // Mock DTO
  case class CreCsvFilenameDtoStub(generationTimestamp: String) {
    def getGenerationTimestamp(): String = generationTimestamp
  }

  test("should return empty list when timestamps match") {
    val timestamp = "2025-05-05"

    val df = Seq(
      ("val1", "val2", "val3", "val4", "val5", timestamp)
    ).toDF("_c0", "_c1", "_c2", "_c3", "_c4", "_c5")

    val dto = CreCsvFilenameDtoStub(timestamp)

    val result = EnteteTmstpToFilenameEqualityCheck.check(df, dto)

    assert(result.isEmpty)
  }

  test("should return CheckErrorDto when timestamps differ") {
    val df = Seq(
      ("val1", "val2", "val3", "val4", "val5", "2024-12-31")
    ).toDF("_c0", "_c1", "_c2", "_c3", "_c4", "_c5")

    val dto = CreCsvFilenameDtoStub("2025-05-05")

    val result = EnteteTmstpToFilenameEqualityCheck.check(df, dto)

    assert(result.nonEmpty)
    assert(result.head.getMessage.contains("Expected"))
  }
}
