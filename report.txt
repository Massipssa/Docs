import React, { useState } from 'react';
import { Box, Grid, Typography, Paper, TextField, Button, FormControl, InputLabel, Select, MenuItem } from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { useNavigate } from 'react-router-dom';

const Dashboard = () => {
  const navigate = useNavigate();
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedSeverity, setSelectedSeverity] = useState('');

  // Mock data for statistics
  const statistics = {
    datacheck: { server: 1, medium: 2, fatal: 3 },
    metadata: { server: 1, medium: 2, fatal: 3 },
    parameter: { server: 1, medium: 2, fatal: 3 },
    monitoring: { server: 1, medium: 2, fatal: 3 },
  };

  // Function to determine the color based on severity
  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'fatal':
        return 'red';
      case 'server':
        return 'orange';
      case 'medium':
        return 'yellow';
      case 'low':
        return 'green';
      default:
        return 'grey';
    }
  };

  // Function to render a single card for a check type
  const renderCard = (checkType, stats) => (
    <Grid item xs={12} sm={6} md={3} key={checkType}>
      <Paper
        onClick={() => handleNavigation(`/${checkType}-check`)}
        sx={{
          padding: 2,
          cursor: 'pointer',
          textAlign: 'center',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          border: '1px solid #ddd',
          borderRadius: '8px',
          boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
        }}
      >
        <Typography variant="h6">
          {checkType.charAt(0).toUpperCase() + checkType.slice(1)}
        </Typography>
        {Object.entries(stats).map(([severity, count]) => (
          <Typography
            key={severity}
            variant="body1"
            sx={{ color: getSeverityColor(severity), fontWeight: 'bold' }}
          >
            {`${severity.charAt(0).toUpperCase() + severity.slice(1)}: ${count}`}
          </Typography>
        ))}
      </Paper>
    </Grid>
  );

  return (
    <Box p={3}>
      <Typography variant="h4" align="center" gutterBottom>
        Data Quality Dashboard
      </Typography>

      {/* Filter Section */}
      <Box mb={3} display="flex" justifyContent="center" alignItems="center" gap={2}>
        <FormControl variant="outlined" sx={{ minWidth: 150 }}>
          <DatePicker
            label="Filter by Date"
            value={selectedDate}
            onChange={(newValue) => setSelectedDate(newValue)}
            renderInput={(params) => <TextField {...params} />}
          />
        </FormControl>
        <FormControl variant="outlined" sx={{ minWidth: 150 }}>
          <InputLabel id="severity-label">Select Severity</InputLabel>
          <Select
            labelId="severity-label"
            value={selectedSeverity}
            onChange={(event) => setSelectedSeverity(event.target.value)}
            label="Select Severity"
          >
            <MenuItem value="">All</MenuItem>
            <MenuItem value="low">Low</MenuItem>
            <MenuItem value="medium">Medium</MenuItem>
            <MenuItem value="server">Server</MenuItem>
            <MenuItem value="fatal">Fatal</MenuItem>
          </Select>
        </FormControl>
        <Button
          variant="contained"
          color="primary"
          onClick={() => console.log('Filters applied', { selectedDate, selectedSeverity })}
        >
          Apply Filters
        </Button>
      </Box>

      {/* Statistics Cards */}
      <Grid container spacing={3}>
        {Object.entries(statistics).map(([checkType, stats]) => renderCard(checkType, stats))}
      </Grid>
    </Box>
  );
};

export default Dashboard;
