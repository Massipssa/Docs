import org.scalatest.funsuite.AnyFunSuite
import org.scalatest.matchers.should.Matchers
import org.apache.spark.sql.SparkSession
import org.mockito.Mockito._
import org.scalatestplus.mockito.MockitoSugar

class SemicolonDelimiterCheckTest extends AnyFunSuite with Matchers with MockitoSugar {

  implicit val spark: SparkSession = SparkSession.builder()
    .master("local[1]")
    .appName("Test")
    .getOrCreate()

  implicit val jobConfig: JobConfigDto = mock[JobConfigDto]

  test("check should return Right(CheckErrorDto) when DataFrame is non-empty") {
    val mockDf = spark.read.csv(Seq("a;b;c").toDS)
    val key = "some/key.csv"

    object TestSparkUtil extends SparkUtility {
      override def loadCsvFromS3(key: String, csvDelimiter: String, hasCsvHeader: Boolean)
                                (implicit jobConfig: JobConfigDto, sparkSession: SparkSession): DataFrame = {
        mockDf
      }
    }

    val result = SemicolonDelimiterCheck.check(key)(jobConfig, spark)
    result.isRight shouldBe true
  }

  test("check should return Left(df) when DataFrame is empty") {
    val emptyDf = spark.emptyDataFrame
    val key = "some/empty.csv"

    object TestSparkUtil extends SparkUtility {
      override def loadCsvFromS3(key: String, csvDelimiter: String, hasCsvHeader: Boolean)
                                (implicit jobConfig: JobConfigDto, sparkSession: SparkSession): DataFrame = {
        emptyDf
      }
    }

    val result = SemicolonDelimiterCheck.check(key)(jobConfig, spark)
    result.isLeft shouldBe true
  }

  test("check should handle exceptions and return CheckErrorDto") {
    val key = "invalid.csv"

    object FailingSparkUtil extends SparkUtility {
      override def loadCsvFromS3(key: String, csvDelimiter: String, hasCsvHeader: Boolean)
                                (implicit jobConfig: JobConfigDto, sparkSession: SparkSession): DataFrame = {
        throw new RuntimeException("Failed to read")
      }
    }

    val result = SemicolonDelimiterCheck.check(key)(jobConfig, spark)
    result.isRight shouldBe true
    result.right.get.description.get should include ("exception")
  }
}
