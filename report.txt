val newDF = Seq(
  ("Alice", "Paris", 30),
  ("Bob", "Lyon", null),
  ("Charlie", "Marseille", 35)
).toDF("name", "city", "age")

val existingDF = Seq(
  ("Alice", "Paris", 30),
  ("Bob", "Lyon", null)
).toDF("name", "city", "age")

// Fonction pour remplacer les nulls
def nullSafe(df: DataFrame): DataFrame = {
  df.columns.foldLeft(df) { (acc, colName) =>
    acc.withColumn(colName,
      when(col(colName).isNull, lit("__NULL__")).otherwise(col(colName))
    )
  }
}

val newClean = nullSafe(newDF)
val existingClean = nullSafe(existingDF)

val result = newClean.except(existingClean)

// Remet les nulls pour l'insertion
val finalDF = result.columns.foldLeft(result) { (acc, c) =>
  acc.withColumn(c, when(col(c) === "__NULL__", lit(null)).otherwise(col(c)))
}

finalDF.show()
