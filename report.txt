import org.scalatest.funsuite.AnyFunSuite

class InterfaceValidationServiceTest extends AnyFunSuite {

  test("Should throw exception when interface is null") {
    assertThrows[IllegalArgumentException] {
      InterfaceValidationService.checkInterfaceValidity(3, null)
    }
  }

  test("Should return error if structureInterface contains null") {
    val dto = InterfaceDto(List(null))
    val result = InterfaceValidationService.checkInterfaceValidity(3, dto)
    assert(result.contains(IngestionReportConstants.METADATA_INTERFACE_STRUCTURE_INTERFACE_NULL_ATTRIBUTE_FOUND_ERROR_STATE))
  }

  test("Should return error if positions are not unique") {
    val dto = InterfaceDto(List(
      StructureInterfaceDto("field1", 1),
      StructureInterfaceDto("field2", 1)  // duplicate position
    ))
    val result = InterfaceValidationService.checkInterfaceValidity(2, dto)
    assert(result.contains(IngestionReportConstants.METADATA_INTERFACE_STRUCTURE_INTERFACE_POSITIONS_DUPLICITY_ERROR_STATE))
  }

  test("Should return error if number of columns doesn't match") {
    val dto = InterfaceDto(List(
      StructureInterfaceDto("field1", 1),
      StructureInterfaceDto("field2", 2)
    ))
    val result = InterfaceValidationService.checkInterfaceValidity(3, dto)
    assert(result.exists(_.contains("REAL_NUMBER_OF_CRE_COLUMNS_DIFFERENT")))
  }

  test("Should return None for valid interface") {
    val dto = InterfaceDto(List(
      StructureInterfaceDto("field1", 1),
      StructureInterfaceDto("field2", 2)
    ))
    val result = InterfaceValidationService.checkInterfaceValidity(2, dto)
    assert(result.isEmpty)
  }
}
