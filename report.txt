import React, { useState } from 'react';
import { Drawer, CssBaseline, AppBar, Toolbar, Typography, Box, Button, Divider, List, ListItem, ListItemIcon, ListItemText, Tooltip, IconButton, Collapse, Avatar } from '@mui/material';
import InboxIcon from '@mui/icons-material/Inbox';
import MailIcon from '@mui/icons-material/Mail';
import NotificationsIcon from '@mui/icons-material/Notifications';
import AccountCircleIcon from '@mui/icons-material/AccountCircle';
import ExpandLess from '@mui/icons-material/ExpandLess';
import ExpandMore from '@mui/icons-material/ExpandMore';
import { Outlet } from 'react-router-dom'; // Import Outlet

const drawerWidth = 240;
const closedDrawerWidth = 60;

function ResponsiveDrawer() {
    const [drawerOpen, setDrawerOpen] = useState(true);
    const [collapseOpen, setCollapseOpen] = useState(false);

    const handleDrawerToggle = () => {
        setDrawerOpen(!drawerOpen);
    };

    const handleCollapseToggle = () => {
        setCollapseOpen(!collapseOpen);
    };

    const menuItems = [
        { text: 'Inbox', icon: <InboxIcon /> },
        { text: 'Mail', icon: <MailIcon /> },
        // Add more items here as needed
    ];

    const collapsibleItem = {
        text: 'Collapsible Menu',
        icon: <InboxIcon />,
        subItems: [
            { text: 'Sub Item 1', icon: <MailIcon /> },
            { text: 'Sub Item 2', icon: <MailIcon /> },
        ],
    };

    return (
        <Box sx={{ display: 'flex', width: '100vw', height: '100vh' }}>
            <CssBaseline />
            <AppBar position="fixed" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>
                <Toolbar>
                    <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
                        Responsive Drawer
                    </Typography>
                    <IconButton color="inherit">
                        <NotificationsIcon />
                    </IconButton>
                    <IconButton color="inherit">
                        <Avatar>
                            <AccountCircleIcon />
                        </Avatar>
                    </IconButton>
                </Toolbar>
            </AppBar>
            <Drawer
                variant="permanent"
                open={drawerOpen}
                sx={{
                    width: drawerOpen ? drawerWidth : closedDrawerWidth,
                    flexShrink: 0,
                    '& .MuiDrawer-paper': {
                        width: drawerOpen ? drawerWidth : closedDrawerWidth,
                        boxSizing: 'border-box',
                        display: 'flex',
                        flexDirection: 'column',
                        justifyContent: 'space-between',
                        overflowX: 'hidden',
                    },
                }}
            >
                <Box sx={{ overflow: 'auto', flexGrow: 1 }}>
                    <Toolbar />
                    <List>
                        {menuItems.map((item, index) => (
                            <ListItem button key={item.text}>
                                <Tooltip title={drawerOpen ? '' : item.text} placement="right">
                                    <ListItemIcon>
                                        {item.icon}
                                    </ListItemIcon>
                                </Tooltip>
                                <Collapse in={drawerOpen} timeout="auto" unmountOnExit>
                                    <ListItemText primary={item.text} />
                                </Collapse>
                            </ListItem>
                        ))}
                        <ListItem button onClick={handleCollapseToggle}>
                            <Tooltip title={drawerOpen ? '' : collapsibleItem.text} placement="right">
                                <ListItemIcon>
                                    {collapsibleItem.icon}
                                </ListItemIcon>
                            </Tooltip>
                            <Collapse in={drawerOpen} timeout="auto" unmountOnExit>
                                <ListItemText primary={collapsibleItem.text} />
                                {collapseOpen ? <ExpandLess /> : <ExpandMore />}
                            </Collapse>
                        </ListItem>
                        <Collapse in={collapseOpen && drawerOpen} timeout="auto" unmountOnExit>
                            <List component="div" disablePadding>
                                {collapsibleItem.subItems.map((subItem, index) => (
                                    <ListItem button key={subItem.text} sx={{ pl: 4 }}>
                                        <Tooltip title={drawerOpen ? '' : subItem.text} placement="right">
                                            <ListItemIcon>
                                                {subItem.icon}
                                            </ListItemIcon>
                                        </Tooltip>
                                        <Collapse in={drawerOpen} timeout="auto" unmountOnExit>
                                            <ListItemText primary={subItem.text} />
                                        </Collapse>
                                    </ListItem>
                                ))}
                            </List>
                        </Collapse>
                    </List>
                </Box>
                <Box>
                    <Divider />
                    <Button
                        onClick={handleDrawerToggle}
                        fullWidth
                    >
                        {drawerOpen ? '>< Collapse' : '<> Expand'}
                    </Button>
                </Box>
            </Drawer>
            <Box
                component="main"
                sx={{
                    flexGrow: 1,
                    p: 3,
                    width: `calc(100vw - ${drawerOpen ? drawerWidth : closedDrawerWidth}px)`,
                    transition: (theme) =>
                        theme.transitions.create('width', {
                            easing: theme.transitions.easing.sharp,
                            duration: theme.transitions.duration.leavingScreen,
                        }),
                    overflow: 'hidden', // Ensure no overflow
                    height: '100vh', // Ensure full height of the viewport
                }}
            >
                <Toolbar />
                <Box sx={{ overflowY: 'auto', height: 'calc(100% - 64px)' }}>
                    {/* The 64px subtraction is for the AppBar height */}
                    <Outlet />
                </Box>
            </Box>
        </Box>
    );
}

export default ResponsiveDrawer;
